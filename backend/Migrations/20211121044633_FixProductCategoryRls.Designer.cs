// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
  [DbContext(typeof(ApplicationDbContext))]
  [Migration("20211121044633_FixProductCategoryRls")]
  partial class FixProductCategoryRls
  {
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("ProductVersion", "6.0.0")
          .HasAnnotation("Relational:MaxIdentifierLength", 63);

      NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

      modelBuilder.Entity("backend.Models.Category", b =>
          {
            b.Property<Guid>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("uuid");

            b.Property<DateTime>("CreateAt")
                      .HasColumnType("timestamp with time zone");

            b.Property<string>("Icon")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<string>("Name")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<string>("Slug")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<string>("Type")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<DateTime>("UpdateAt")
                      .HasColumnType("timestamp with time zone");

            b.HasKey("Id");

            b.ToTable("Categories");
          });

      modelBuilder.Entity("backend.Models.Gallery", b =>
          {
            b.Property<Guid>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("uuid");

            b.Property<DateTime>("CreateAt")
                      .HasColumnType("timestamp with time zone");

            b.Property<Guid>("ProductId")
                      .HasColumnType("uuid");

            b.Property<DateTime>("UpdateAt")
                      .HasColumnType("timestamp with time zone");

            b.Property<string>("Url")
                      .IsRequired()
                      .HasColumnType("text");

            b.HasKey("Id");

            b.HasIndex("ProductId");

            b.ToTable("Gallery");
          });

      modelBuilder.Entity("backend.Models.Product", b =>
          {
            b.Property<Guid>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("uuid");

            b.Property<Guid>("CategoryId")
                      .HasDefaultValue(new Guid("0b75c117-d60f-4882-95d2-a887797e9836"))
                      .HasColumnType("uuid");

            b.Property<DateTime>("CreateAt")
                      .HasColumnType("timestamp with time zone");

            b.Property<string>("Description")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<int>("DiscountInPercent")
                      .HasColumnType("integer");

            b.Property<string>("Image")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<int>("Price")
                      .HasColumnType("integer");

            b.Property<int>("SalePrice")
                      .HasColumnType("integer");

            b.Property<string>("Slug")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<string>("Title")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<string>("Type")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<string>("Unit")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<DateTime>("UpdateAt")
                      .HasColumnType("timestamp with time zone");

            b.HasKey("Id");

            b.HasIndex("CategoryId");

            b.ToTable("Products");
          });

      modelBuilder.Entity("backend.Models.User", b =>
          {
            b.Property<Guid>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("uuid");

            b.Property<int>("AccessFailedCount")
                      .HasColumnType("integer");

            b.Property<string>("ConcurrencyStamp")
                      .IsConcurrencyToken()
                      .HasColumnType("text");

            b.Property<string>("ContactNumber")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<string>("Email")
                      .HasMaxLength(256)
                      .HasColumnType("character varying(256)");

            b.Property<bool>("EmailConfirmed")
                      .HasColumnType("boolean");

            b.Property<bool>("LockoutEnabled")
                      .HasColumnType("boolean");

            b.Property<DateTimeOffset?>("LockoutEnd")
                      .HasColumnType("timestamp with time zone");

            b.Property<string>("Name")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<string>("NormalizedEmail")
                      .HasMaxLength(256)
                      .HasColumnType("character varying(256)");

            b.Property<string>("NormalizedUserName")
                      .HasMaxLength(256)
                      .HasColumnType("character varying(256)");

            b.Property<string>("PasswordHash")
                      .HasColumnType("text");

            b.Property<string>("PhoneNumber")
                      .HasColumnType("text");

            b.Property<bool>("PhoneNumberConfirmed")
                      .HasColumnType("boolean");

            b.Property<string>("Role")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<string>("SecurityStamp")
                      .HasColumnType("text");

            b.Property<bool>("TwoFactorEnabled")
                      .HasColumnType("boolean");

            b.Property<string>("UserName")
                      .HasMaxLength(256)
                      .HasColumnType("character varying(256)");

            b.HasKey("Id");

            b.HasIndex("NormalizedEmail")
                      .HasDatabaseName("EmailIndex");

            b.HasIndex("NormalizedUserName")
                      .IsUnique()
                      .HasDatabaseName("UserNameIndex");

            b.ToTable("Users", (string)null);
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
          {
            b.Property<Guid>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("uuid");

            b.Property<string>("ConcurrencyStamp")
                      .IsConcurrencyToken()
                      .HasColumnType("text");

            b.Property<string>("Name")
                      .HasMaxLength(256)
                      .HasColumnType("character varying(256)");

            b.Property<string>("NormalizedName")
                      .HasMaxLength(256)
                      .HasColumnType("character varying(256)");

            b.HasKey("Id");

            b.HasIndex("NormalizedName")
                      .IsUnique()
                      .HasDatabaseName("RoleNameIndex");

            b.ToTable("Roles", (string)null);
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

            b.Property<string>("ClaimType")
                      .HasColumnType("text");

            b.Property<string>("ClaimValue")
                      .HasColumnType("text");

            b.Property<Guid>("RoleId")
                      .HasColumnType("uuid");

            b.HasKey("Id");

            b.HasIndex("RoleId");

            b.ToTable("RoleClaims", (string)null);
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

            b.Property<string>("ClaimType")
                      .HasColumnType("text");

            b.Property<string>("ClaimValue")
                      .HasColumnType("text");

            b.Property<Guid>("UserId")
                      .HasColumnType("uuid");

            b.HasKey("Id");

            b.HasIndex("UserId");

            b.ToTable("UserClaims", (string)null);
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
          {
            b.Property<string>("LoginProvider")
                      .HasColumnType("text");

            b.Property<string>("ProviderKey")
                      .HasColumnType("text");

            b.Property<string>("ProviderDisplayName")
                      .HasColumnType("text");

            b.Property<Guid>("UserId")
                      .HasColumnType("uuid");

            b.HasKey("LoginProvider", "ProviderKey");

            b.HasIndex("UserId");

            b.ToTable("UserLogins", (string)null);
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
          {
            b.Property<Guid>("UserId")
                      .HasColumnType("uuid");

            b.Property<Guid>("RoleId")
                      .HasColumnType("uuid");

            b.HasKey("UserId", "RoleId");

            b.HasIndex("RoleId");

            b.ToTable("UserRoles", (string)null);
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
          {
            b.Property<Guid>("UserId")
                      .HasColumnType("uuid");

            b.Property<string>("LoginProvider")
                      .HasColumnType("text");

            b.Property<string>("Name")
                      .HasColumnType("text");

            b.Property<string>("Value")
                      .HasColumnType("text");

            b.HasKey("UserId", "LoginProvider", "Name");

            b.ToTable("UserTokens", (string)null);
          });

      modelBuilder.Entity("backend.Models.Gallery", b =>
          {
            b.HasOne("backend.Models.Product", null)
                      .WithMany("Gallery")
                      .HasForeignKey("ProductId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("backend.Models.Product", b =>
          {
            b.HasOne("backend.Models.Category", "Category")
                      .WithMany("Products")
                      .HasForeignKey("CategoryId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.Navigation("Category");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
          {
            b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                      .WithMany()
                      .HasForeignKey("RoleId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
          {
            b.HasOne("backend.Models.User", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
          {
            b.HasOne("backend.Models.User", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
          {
            b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                      .WithMany()
                      .HasForeignKey("RoleId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("backend.Models.User", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
          {
            b.HasOne("backend.Models.User", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("backend.Models.Category", b =>
          {
            b.Navigation("Products");
          });

      modelBuilder.Entity("backend.Models.Product", b =>
          {
            b.Navigation("Gallery");
          });
#pragma warning restore 612, 618
    }
  }
}
